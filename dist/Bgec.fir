;buildInfoPackage: chisel3, version: 3.2.3, scalaVersion: 2.11.12, sbtVersion: 1.3.2
circuit Bgec : 
  module Controller : 
    input clock : Clock
    input reset : Reset
    output io : {flip inButtonStart : UInt<1>, flip inButtonY : UInt<1>, flip inButtonX : UInt<1>, flip inButtonB : UInt<1>, flip inButtonA : UInt<1>, flip inButtonL : UInt<1>, flip inButtonR : UInt<1>, flip inButtonZ : UInt<1>, flip inDpadUp : UInt<1>, flip inDpadDown : UInt<1>, flip inDpadRight : UInt<1>, flip inDpadLeft : UInt<1>, flip inJoystickX : UInt<8>, flip inJoystickY : UInt<8>, flip inCstickX : UInt<8>, flip inCstickY : UInt<8>, flip inTriggerL : UInt<8>, flip inTriggerR : UInt<8>, outData : UInt<64>}
    
    node _T = cat(io.inTriggerL, io.inTriggerR) @[Cat.scala 29:58]
    node _T_1 = cat(io.inJoystickY, io.inCstickX) @[Cat.scala 29:58]
    node _T_2 = cat(_T_1, io.inCstickY) @[Cat.scala 29:58]
    node _T_3 = cat(_T_2, _T) @[Cat.scala 29:58]
    node _T_4 = cat(io.inDpadRight, io.inDpadLeft) @[Cat.scala 29:58]
    node _T_5 = cat(_T_4, io.inJoystickX) @[Cat.scala 29:58]
    node _T_6 = cat(io.inButtonZ, io.inDpadUp) @[Cat.scala 29:58]
    node _T_7 = cat(_T_6, io.inDpadDown) @[Cat.scala 29:58]
    node _T_8 = cat(_T_7, _T_5) @[Cat.scala 29:58]
    node _T_9 = cat(_T_8, _T_3) @[Cat.scala 29:58]
    node _T_10 = cat(io.inButtonL, io.inButtonR) @[Cat.scala 29:58]
    node _T_11 = cat(io.inButtonB, io.inButtonA) @[Cat.scala 29:58]
    node _T_12 = cat(_T_11, UInt<1>("h01")) @[Cat.scala 29:58]
    node _T_13 = cat(_T_12, _T_10) @[Cat.scala 29:58]
    node _T_14 = cat(io.inButtonStart, io.inButtonY) @[Cat.scala 29:58]
    node _T_15 = cat(_T_14, io.inButtonX) @[Cat.scala 29:58]
    node _T_16 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_17 = cat(_T_16, UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_18 = cat(_T_17, _T_15) @[Cat.scala 29:58]
    node _T_19 = cat(_T_18, _T_13) @[Cat.scala 29:58]
    node _T_20 = cat(_T_19, _T_9) @[Cat.scala 29:58]
    io.outData <= _T_20 @[Controller.scala 31:14]
    
  module ParallelADC : 
    input clock : Clock
    input reset : Reset
    output io : {notConvSt : UInt<1>, flip notEndOfConv : UInt<1>, notChipSel : UInt<1>, notRead : UInt<1>, flip dataBus : UInt<8>, outData : UInt<8>}
    
    reg dataReg : UInt<8>, clock @[ParallelADC.scala 19:20]
    io.outData <= dataReg @[ParallelADC.scala 21:14]
    reg startConversion : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[ParallelADC.scala 23:32]
    when startConversion : @[ParallelADC.scala 25:25]
      io.notConvSt <= UInt<1>("h00") @[ParallelADC.scala 26:18]
      skip @[ParallelADC.scala 25:25]
    else : @[ParallelADC.scala 27:15]
      io.notConvSt <= UInt<1>("h01") @[ParallelADC.scala 28:18]
      startConversion <= UInt<1>("h00") @[ParallelADC.scala 29:21]
      skip @[ParallelADC.scala 27:15]
    reg selectAndRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ParallelADC.scala 32:30]
    node _T = eq(selectAndRead, UInt<1>("h00")) @[ParallelADC.scala 33:20]
    io.notChipSel <= _T @[ParallelADC.scala 33:17]
    io.notRead <= selectAndRead @[ParallelADC.scala 34:14]
    when selectAndRead : @[ParallelADC.scala 36:23]
      dataReg <= io.dataBus @[ParallelADC.scala 37:13]
      selectAndRead <= UInt<1>("h00") @[ParallelADC.scala 38:19]
      startConversion <= UInt<1>("h01") @[ParallelADC.scala 39:21]
      skip @[ParallelADC.scala 36:23]
    node _T_1 = eq(io.notEndOfConv, UInt<1>("h00")) @[ParallelADC.scala 42:8]
    when _T_1 : @[ParallelADC.scala 42:26]
      selectAndRead <= UInt<1>("h01") @[ParallelADC.scala 43:19]
      skip @[ParallelADC.scala 42:26]
    
  module ParallelADC_1 : 
    input clock : Clock
    input reset : Reset
    output io : {notConvSt : UInt<1>, flip notEndOfConv : UInt<1>, notChipSel : UInt<1>, notRead : UInt<1>, flip dataBus : UInt<8>, outData : UInt<8>}
    
    reg dataReg : UInt<8>, clock @[ParallelADC.scala 19:20]
    io.outData <= dataReg @[ParallelADC.scala 21:14]
    reg startConversion : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[ParallelADC.scala 23:32]
    when startConversion : @[ParallelADC.scala 25:25]
      io.notConvSt <= UInt<1>("h00") @[ParallelADC.scala 26:18]
      skip @[ParallelADC.scala 25:25]
    else : @[ParallelADC.scala 27:15]
      io.notConvSt <= UInt<1>("h01") @[ParallelADC.scala 28:18]
      startConversion <= UInt<1>("h00") @[ParallelADC.scala 29:21]
      skip @[ParallelADC.scala 27:15]
    reg selectAndRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ParallelADC.scala 32:30]
    node _T = eq(selectAndRead, UInt<1>("h00")) @[ParallelADC.scala 33:20]
    io.notChipSel <= _T @[ParallelADC.scala 33:17]
    io.notRead <= selectAndRead @[ParallelADC.scala 34:14]
    when selectAndRead : @[ParallelADC.scala 36:23]
      dataReg <= io.dataBus @[ParallelADC.scala 37:13]
      selectAndRead <= UInt<1>("h00") @[ParallelADC.scala 38:19]
      startConversion <= UInt<1>("h01") @[ParallelADC.scala 39:21]
      skip @[ParallelADC.scala 36:23]
    node _T_1 = eq(io.notEndOfConv, UInt<1>("h00")) @[ParallelADC.scala 42:8]
    when _T_1 : @[ParallelADC.scala 42:26]
      selectAndRead <= UInt<1>("h01") @[ParallelADC.scala 43:19]
      skip @[ParallelADC.scala 42:26]
    
  module ParallelADC_2 : 
    input clock : Clock
    input reset : Reset
    output io : {notConvSt : UInt<1>, flip notEndOfConv : UInt<1>, notChipSel : UInt<1>, notRead : UInt<1>, flip dataBus : UInt<8>, outData : UInt<8>}
    
    reg dataReg : UInt<8>, clock @[ParallelADC.scala 19:20]
    io.outData <= dataReg @[ParallelADC.scala 21:14]
    reg startConversion : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[ParallelADC.scala 23:32]
    when startConversion : @[ParallelADC.scala 25:25]
      io.notConvSt <= UInt<1>("h00") @[ParallelADC.scala 26:18]
      skip @[ParallelADC.scala 25:25]
    else : @[ParallelADC.scala 27:15]
      io.notConvSt <= UInt<1>("h01") @[ParallelADC.scala 28:18]
      startConversion <= UInt<1>("h00") @[ParallelADC.scala 29:21]
      skip @[ParallelADC.scala 27:15]
    reg selectAndRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ParallelADC.scala 32:30]
    node _T = eq(selectAndRead, UInt<1>("h00")) @[ParallelADC.scala 33:20]
    io.notChipSel <= _T @[ParallelADC.scala 33:17]
    io.notRead <= selectAndRead @[ParallelADC.scala 34:14]
    when selectAndRead : @[ParallelADC.scala 36:23]
      dataReg <= io.dataBus @[ParallelADC.scala 37:13]
      selectAndRead <= UInt<1>("h00") @[ParallelADC.scala 38:19]
      startConversion <= UInt<1>("h01") @[ParallelADC.scala 39:21]
      skip @[ParallelADC.scala 36:23]
    node _T_1 = eq(io.notEndOfConv, UInt<1>("h00")) @[ParallelADC.scala 42:8]
    when _T_1 : @[ParallelADC.scala 42:26]
      selectAndRead <= UInt<1>("h01") @[ParallelADC.scala 43:19]
      skip @[ParallelADC.scala 42:26]
    
  module ParallelADC_3 : 
    input clock : Clock
    input reset : Reset
    output io : {notConvSt : UInt<1>, flip notEndOfConv : UInt<1>, notChipSel : UInt<1>, notRead : UInt<1>, flip dataBus : UInt<8>, outData : UInt<8>}
    
    reg dataReg : UInt<8>, clock @[ParallelADC.scala 19:20]
    io.outData <= dataReg @[ParallelADC.scala 21:14]
    reg startConversion : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[ParallelADC.scala 23:32]
    when startConversion : @[ParallelADC.scala 25:25]
      io.notConvSt <= UInt<1>("h00") @[ParallelADC.scala 26:18]
      skip @[ParallelADC.scala 25:25]
    else : @[ParallelADC.scala 27:15]
      io.notConvSt <= UInt<1>("h01") @[ParallelADC.scala 28:18]
      startConversion <= UInt<1>("h00") @[ParallelADC.scala 29:21]
      skip @[ParallelADC.scala 27:15]
    reg selectAndRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ParallelADC.scala 32:30]
    node _T = eq(selectAndRead, UInt<1>("h00")) @[ParallelADC.scala 33:20]
    io.notChipSel <= _T @[ParallelADC.scala 33:17]
    io.notRead <= selectAndRead @[ParallelADC.scala 34:14]
    when selectAndRead : @[ParallelADC.scala 36:23]
      dataReg <= io.dataBus @[ParallelADC.scala 37:13]
      selectAndRead <= UInt<1>("h00") @[ParallelADC.scala 38:19]
      startConversion <= UInt<1>("h01") @[ParallelADC.scala 39:21]
      skip @[ParallelADC.scala 36:23]
    node _T_1 = eq(io.notEndOfConv, UInt<1>("h00")) @[ParallelADC.scala 42:8]
    when _T_1 : @[ParallelADC.scala 42:26]
      selectAndRead <= UInt<1>("h01") @[ParallelADC.scala 43:19]
      skip @[ParallelADC.scala 42:26]
    
  module ParallelADC_4 : 
    input clock : Clock
    input reset : Reset
    output io : {notConvSt : UInt<1>, flip notEndOfConv : UInt<1>, notChipSel : UInt<1>, notRead : UInt<1>, flip dataBus : UInt<8>, outData : UInt<8>}
    
    reg dataReg : UInt<8>, clock @[ParallelADC.scala 19:20]
    io.outData <= dataReg @[ParallelADC.scala 21:14]
    reg startConversion : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[ParallelADC.scala 23:32]
    when startConversion : @[ParallelADC.scala 25:25]
      io.notConvSt <= UInt<1>("h00") @[ParallelADC.scala 26:18]
      skip @[ParallelADC.scala 25:25]
    else : @[ParallelADC.scala 27:15]
      io.notConvSt <= UInt<1>("h01") @[ParallelADC.scala 28:18]
      startConversion <= UInt<1>("h00") @[ParallelADC.scala 29:21]
      skip @[ParallelADC.scala 27:15]
    reg selectAndRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ParallelADC.scala 32:30]
    node _T = eq(selectAndRead, UInt<1>("h00")) @[ParallelADC.scala 33:20]
    io.notChipSel <= _T @[ParallelADC.scala 33:17]
    io.notRead <= selectAndRead @[ParallelADC.scala 34:14]
    when selectAndRead : @[ParallelADC.scala 36:23]
      dataReg <= io.dataBus @[ParallelADC.scala 37:13]
      selectAndRead <= UInt<1>("h00") @[ParallelADC.scala 38:19]
      startConversion <= UInt<1>("h01") @[ParallelADC.scala 39:21]
      skip @[ParallelADC.scala 36:23]
    node _T_1 = eq(io.notEndOfConv, UInt<1>("h00")) @[ParallelADC.scala 42:8]
    when _T_1 : @[ParallelADC.scala 42:26]
      selectAndRead <= UInt<1>("h01") @[ParallelADC.scala 43:19]
      skip @[ParallelADC.scala 42:26]
    
  module ParallelADC_5 : 
    input clock : Clock
    input reset : Reset
    output io : {notConvSt : UInt<1>, flip notEndOfConv : UInt<1>, notChipSel : UInt<1>, notRead : UInt<1>, flip dataBus : UInt<8>, outData : UInt<8>}
    
    reg dataReg : UInt<8>, clock @[ParallelADC.scala 19:20]
    io.outData <= dataReg @[ParallelADC.scala 21:14]
    reg startConversion : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[ParallelADC.scala 23:32]
    when startConversion : @[ParallelADC.scala 25:25]
      io.notConvSt <= UInt<1>("h00") @[ParallelADC.scala 26:18]
      skip @[ParallelADC.scala 25:25]
    else : @[ParallelADC.scala 27:15]
      io.notConvSt <= UInt<1>("h01") @[ParallelADC.scala 28:18]
      startConversion <= UInt<1>("h00") @[ParallelADC.scala 29:21]
      skip @[ParallelADC.scala 27:15]
    reg selectAndRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ParallelADC.scala 32:30]
    node _T = eq(selectAndRead, UInt<1>("h00")) @[ParallelADC.scala 33:20]
    io.notChipSel <= _T @[ParallelADC.scala 33:17]
    io.notRead <= selectAndRead @[ParallelADC.scala 34:14]
    when selectAndRead : @[ParallelADC.scala 36:23]
      dataReg <= io.dataBus @[ParallelADC.scala 37:13]
      selectAndRead <= UInt<1>("h00") @[ParallelADC.scala 38:19]
      startConversion <= UInt<1>("h01") @[ParallelADC.scala 39:21]
      skip @[ParallelADC.scala 36:23]
    node _T_1 = eq(io.notEndOfConv, UInt<1>("h00")) @[ParallelADC.scala 42:8]
    when _T_1 : @[ParallelADC.scala 42:26]
      selectAndRead <= UInt<1>("h01") @[ParallelADC.scala 43:19]
      skip @[ParallelADC.scala 42:26]
    
  extmodule DataLine : 
    output line : Analog<1>
    input write : UInt<1>
    input writeData : UInt<1>
    output readData : UInt<1>
    
    defname = DataLine
    
    
  module Serializer : 
    input clock : Clock
    input reset : Reset
    output io : {data : Analog<1>, flip startSerialization : UInt<1>, flip outputData : UInt<64>, write : UInt<1>, writeData : UInt<1>}
    
    reg serializeIndex : UInt<6>, clock with : (reset => (reset, UInt<1>("h00"))) @[Serializer.scala 21:31]
    reg microsecondCounter : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[Serializer.scala 22:35]
    reg cycleCounter : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[Serializer.scala 23:29]
    reg serialize : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Serializer.scala 24:26]
    node _T = eq(serialize, UInt<1>("h00")) @[Serializer.scala 26:33]
    node _T_1 = and(io.startSerialization, _T) @[Serializer.scala 26:30]
    when _T_1 : @[Serializer.scala 26:45]
      serialize <= UInt<1>("h01") @[Serializer.scala 27:15]
      skip @[Serializer.scala 26:45]
    when serialize : @[Serializer.scala 30:19]
      io.write <= UInt<1>("h01") @[Serializer.scala 31:14]
      node _T_2 = eq(microsecondCounter, UInt<1>("h00")) @[Serializer.scala 32:29]
      when _T_2 : @[Serializer.scala 32:38]
        io.writeData <= UInt<1>("h00") @[Serializer.scala 33:20]
        skip @[Serializer.scala 32:38]
      else : @[Serializer.scala 34:44]
        node _T_3 = eq(microsecondCounter, UInt<2>("h03")) @[Serializer.scala 34:35]
        when _T_3 : @[Serializer.scala 34:44]
          io.writeData <= UInt<1>("h01") @[Serializer.scala 35:20]
          skip @[Serializer.scala 34:44]
        else : @[Serializer.scala 36:17]
          node _T_4 = dshr(io.outputData, serializeIndex) @[Serializer.scala 37:36]
          node _T_5 = bits(_T_4, 0, 0) @[Serializer.scala 37:36]
          io.writeData <= _T_5 @[Serializer.scala 37:20]
          skip @[Serializer.scala 36:17]
      node _T_6 = eq(cycleCounter, UInt<4>("h0f")) @[Serializer.scala 39:23]
      when _T_6 : @[Serializer.scala 39:33]
        node _T_7 = eq(microsecondCounter, UInt<2>("h03")) @[Serializer.scala 40:31]
        when _T_7 : @[Serializer.scala 40:40]
          node _T_8 = geq(serializeIndex, UInt<6>("h03f")) @[Serializer.scala 41:29]
          when _T_8 : @[Serializer.scala 41:46]
            serialize <= UInt<1>("h00") @[Serializer.scala 42:21]
            skip @[Serializer.scala 41:46]
          node _T_9 = add(serializeIndex, UInt<1>("h01")) @[Serializer.scala 44:42]
          node _T_10 = tail(_T_9, 1) @[Serializer.scala 44:42]
          serializeIndex <= _T_10 @[Serializer.scala 44:24]
          skip @[Serializer.scala 40:40]
        node _T_11 = add(microsecondCounter, UInt<1>("h01")) @[Serializer.scala 46:48]
        node _T_12 = tail(_T_11, 1) @[Serializer.scala 46:48]
        microsecondCounter <= _T_12 @[Serializer.scala 46:26]
        skip @[Serializer.scala 39:33]
      node _T_13 = add(cycleCounter, UInt<1>("h01")) @[Serializer.scala 48:34]
      node _T_14 = tail(_T_13, 1) @[Serializer.scala 48:34]
      cycleCounter <= _T_14 @[Serializer.scala 48:18]
      skip @[Serializer.scala 30:19]
    else : @[Serializer.scala 49:15]
      io.write <= UInt<1>("h00") @[Serializer.scala 50:14]
      io.writeData <= UInt<1>("h01") @[Serializer.scala 51:18]
      skip @[Serializer.scala 49:15]
    
  module Deserializer : 
    input clock : Clock
    input reset : Reset
    output io : {flip startDeserialization : UInt<1>, flip pauseDeserialization : UInt<1>, flip readData : UInt<1>, inputData : UInt<1>[24], bitsRead : UInt<24>}
    
    reg dataBuffer : UInt<1>[24], clock @[Deserializer.scala 18:23]
    reg bitsReadReg : UInt<24>, clock @[Deserializer.scala 19:24]
    reg microsecondCounter : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[Deserializer.scala 21:35]
    reg cycleCounter : UInt<4>, clock with : (reset => (reset, UInt<1>("h00"))) @[Deserializer.scala 22:29]
    reg deserialize : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Deserializer.scala 23:28]
    node _T = asUInt(reset) @[Deserializer.scala 25:20]
    when _T : @[Deserializer.scala 25:24]
      dataBuffer[0] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[1] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[2] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[3] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[4] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[5] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[6] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[7] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[8] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[9] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[10] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[11] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[12] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[13] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[14] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[15] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[16] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[17] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[18] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[19] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[20] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[21] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[22] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      dataBuffer[23] <= UInt<1>("h00") @[Deserializer.scala 26:42]
      skip @[Deserializer.scala 25:24]
    reg guessingPhase : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Deserializer.scala 29:30]
    reg cyclesOfLow : UInt<6>, clock with : (reset => (reset, UInt<1>("h00"))) @[Deserializer.scala 30:28]
    reg cyclesOfHigh : UInt<6>, clock with : (reset => (reset, UInt<1>("h00"))) @[Deserializer.scala 31:29]
    node _T_1 = eq(io.pauseDeserialization, UInt<1>("h00")) @[Deserializer.scala 33:8]
    when _T_1 : @[Deserializer.scala 33:34]
      node _T_2 = eq(deserialize, UInt<1>("h00")) @[Deserializer.scala 34:38]
      node _T_3 = and(io.startDeserialization, _T_2) @[Deserializer.scala 34:35]
      node _T_4 = or(_T_3, guessingPhase) @[Deserializer.scala 34:52]
      when _T_4 : @[Deserializer.scala 34:70]
        when io.startDeserialization : @[Deserializer.scala 35:37]
          guessingPhase <= UInt<1>("h01") @[Deserializer.scala 36:23]
          skip @[Deserializer.scala 35:37]
        when io.readData : @[Deserializer.scala 38:25]
          node _T_5 = add(cyclesOfHigh, UInt<1>("h01")) @[Deserializer.scala 39:38]
          node _T_6 = tail(_T_5, 1) @[Deserializer.scala 39:38]
          cyclesOfHigh <= _T_6 @[Deserializer.scala 39:22]
          skip @[Deserializer.scala 38:25]
        else : @[Deserializer.scala 40:19]
          node _T_7 = add(cyclesOfLow, UInt<1>("h01")) @[Deserializer.scala 41:36]
          node _T_8 = tail(_T_7, 1) @[Deserializer.scala 41:36]
          cyclesOfLow <= _T_8 @[Deserializer.scala 41:21]
          node _T_9 = add(cyclesOfLow, cyclesOfHigh) @[Deserializer.scala 42:27]
          node _T_10 = tail(_T_9, 1) @[Deserializer.scala 42:27]
          node _T_11 = gt(_T_10, UInt<6>("h038")) @[Deserializer.scala 42:43]
          when _T_11 : @[Deserializer.scala 42:51]
            node _T_12 = gt(cyclesOfHigh, cyclesOfLow) @[Deserializer.scala 43:40]
            node _T_13 = bits(bitsReadReg, 4, 0)
            dataBuffer[_T_13] <= _T_12 @[Deserializer.scala 67:29]
            node _T_14 = add(bitsReadReg, UInt<1>("h01")) @[Deserializer.scala 68:32]
            node _T_15 = tail(_T_14, 1) @[Deserializer.scala 68:32]
            bitsReadReg <= _T_15 @[Deserializer.scala 68:17]
            guessingPhase <= UInt<1>("h00") @[Deserializer.scala 44:25]
            deserialize <= UInt<1>("h01") @[Deserializer.scala 45:23]
            microsecondCounter <= UInt<1>("h00") @[Deserializer.scala 46:30]
            cycleCounter <= UInt<1>("h00") @[Deserializer.scala 47:24]
            skip @[Deserializer.scala 42:51]
          skip @[Deserializer.scala 40:19]
        skip @[Deserializer.scala 34:70]
      node _T_16 = eq(guessingPhase, UInt<1>("h00")) @[Deserializer.scala 52:25]
      node _T_17 = and(deserialize, _T_16) @[Deserializer.scala 52:22]
      when _T_17 : @[Deserializer.scala 52:41]
        node _T_18 = eq(cycleCounter, UInt<2>("h03")) @[Deserializer.scala 53:25]
        when _T_18 : @[Deserializer.scala 53:34]
          node _T_19 = eq(microsecondCounter, UInt<2>("h02")) @[Deserializer.scala 54:33]
          when _T_19 : @[Deserializer.scala 54:42]
            node _T_20 = bits(bitsReadReg, 4, 0)
            dataBuffer[_T_20] <= io.readData @[Deserializer.scala 67:29]
            node _T_21 = add(bitsReadReg, UInt<1>("h01")) @[Deserializer.scala 68:32]
            node _T_22 = tail(_T_21, 1) @[Deserializer.scala 68:32]
            bitsReadReg <= _T_22 @[Deserializer.scala 68:17]
            skip @[Deserializer.scala 54:42]
          node _T_23 = add(microsecondCounter, UInt<1>("h01")) @[Deserializer.scala 57:50]
          node _T_24 = tail(_T_23, 1) @[Deserializer.scala 57:50]
          microsecondCounter <= _T_24 @[Deserializer.scala 57:28]
          skip @[Deserializer.scala 53:34]
        node _T_25 = add(cycleCounter, UInt<1>("h01")) @[Deserializer.scala 59:36]
        node _T_26 = tail(_T_25, 1) @[Deserializer.scala 59:36]
        cycleCounter <= _T_26 @[Deserializer.scala 59:20]
        skip @[Deserializer.scala 52:41]
      skip @[Deserializer.scala 33:34]
    io.inputData[0] <= dataBuffer[0] @[Deserializer.scala 63:16]
    io.inputData[1] <= dataBuffer[1] @[Deserializer.scala 63:16]
    io.inputData[2] <= dataBuffer[2] @[Deserializer.scala 63:16]
    io.inputData[3] <= dataBuffer[3] @[Deserializer.scala 63:16]
    io.inputData[4] <= dataBuffer[4] @[Deserializer.scala 63:16]
    io.inputData[5] <= dataBuffer[5] @[Deserializer.scala 63:16]
    io.inputData[6] <= dataBuffer[6] @[Deserializer.scala 63:16]
    io.inputData[7] <= dataBuffer[7] @[Deserializer.scala 63:16]
    io.inputData[8] <= dataBuffer[8] @[Deserializer.scala 63:16]
    io.inputData[9] <= dataBuffer[9] @[Deserializer.scala 63:16]
    io.inputData[10] <= dataBuffer[10] @[Deserializer.scala 63:16]
    io.inputData[11] <= dataBuffer[11] @[Deserializer.scala 63:16]
    io.inputData[12] <= dataBuffer[12] @[Deserializer.scala 63:16]
    io.inputData[13] <= dataBuffer[13] @[Deserializer.scala 63:16]
    io.inputData[14] <= dataBuffer[14] @[Deserializer.scala 63:16]
    io.inputData[15] <= dataBuffer[15] @[Deserializer.scala 63:16]
    io.inputData[16] <= dataBuffer[16] @[Deserializer.scala 63:16]
    io.inputData[17] <= dataBuffer[17] @[Deserializer.scala 63:16]
    io.inputData[18] <= dataBuffer[18] @[Deserializer.scala 63:16]
    io.inputData[19] <= dataBuffer[19] @[Deserializer.scala 63:16]
    io.inputData[20] <= dataBuffer[20] @[Deserializer.scala 63:16]
    io.inputData[21] <= dataBuffer[21] @[Deserializer.scala 63:16]
    io.inputData[22] <= dataBuffer[22] @[Deserializer.scala 63:16]
    io.inputData[23] <= dataBuffer[23] @[Deserializer.scala 63:16]
    io.bitsRead <= bitsReadReg @[Deserializer.scala 64:15]
    
  module Bgec : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip inButtonStart : UInt<1>, flip inButtonY : UInt<1>, flip inButtonX : UInt<1>, flip inButtonB : UInt<1>, flip inButtonA : UInt<1>, flip inButtonL : UInt<1>, flip inButtonR : UInt<1>, flip inButtonZ : UInt<1>, flip inDpadUp : UInt<1>, flip inDpadDown : UInt<1>, flip inDpadRight : UInt<1>, flip inDpadLeft : UInt<1>, outJoystickXNotConvSt : UInt<1>, flip inJoystickXNotEndOfConv : UInt<1>, outJoystickXNotChipSel : UInt<1>, outJoystickXNotRead : UInt<1>, flip inJoystickXData : UInt<8>, outJoystickYNotConvSt : UInt<1>, flip inJoystickYNotEndOfConv : UInt<1>, outJoystickYNotChipSel : UInt<1>, outJoystickYNotRead : UInt<1>, flip inJoystickYData : UInt<8>, outCStickXNotConvSt : UInt<1>, flip inCStickXNotEndOfConv : UInt<1>, outCStickXNotChipSel : UInt<1>, outCStickXNotRead : UInt<1>, flip inCStickXData : UInt<8>, outCStickYNotConvSt : UInt<1>, flip inCStickYNotEndOfConv : UInt<1>, outCStickYNotChipSel : UInt<1>, outCStickYNotRead : UInt<1>, flip inCStickYData : UInt<8>, outTriggerLNotConvSt : UInt<1>, flip inTriggerLNotEndOfConv : UInt<1>, outTriggerLNotChipSel : UInt<1>, outTriggerLNotRead : UInt<1>, flip inTriggerLData : UInt<8>, outTriggerRNotConvSt : UInt<1>, flip inTriggerRNotEndOfConv : UInt<1>, outTriggerRNotChipSel : UInt<1>, outTriggerRNotRead : UInt<1>, flip inTriggerRData : UInt<8>, gcData : Analog<1>}
    
    inst controller of Controller @[Bgec.scala 8:26]
    controller.clock <= clock
    controller.reset <= reset
    reg clockParity : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Bgec.scala 62:28]
    inst joystickXADC of ParallelADC @[Bgec.scala 64:28]
    joystickXADC.clock <= clock
    joystickXADC.reset <= reset
    io.outJoystickXNotConvSt <= joystickXADC.io.notConvSt @[Bgec.scala 65:28]
    joystickXADC.io.notEndOfConv <= io.inJoystickXNotEndOfConv @[Bgec.scala 66:32]
    io.outJoystickXNotChipSel <= joystickXADC.io.notChipSel @[Bgec.scala 67:29]
    io.outJoystickXNotRead <= joystickXADC.io.notRead @[Bgec.scala 68:26]
    joystickXADC.io.dataBus <= io.inJoystickXData @[Bgec.scala 69:27]
    inst joystickYADC of ParallelADC_1 @[Bgec.scala 71:28]
    joystickYADC.clock <= clock
    joystickYADC.reset <= reset
    io.outJoystickYNotConvSt <= joystickYADC.io.notConvSt @[Bgec.scala 72:28]
    joystickYADC.io.notEndOfConv <= io.inJoystickYNotEndOfConv @[Bgec.scala 73:32]
    io.outJoystickYNotChipSel <= joystickYADC.io.notChipSel @[Bgec.scala 74:29]
    io.outJoystickYNotRead <= joystickYADC.io.notRead @[Bgec.scala 75:26]
    joystickYADC.io.dataBus <= io.inJoystickYData @[Bgec.scala 76:27]
    inst cStickXADC of ParallelADC_2 @[Bgec.scala 78:26]
    cStickXADC.clock <= clock
    cStickXADC.reset <= reset
    io.outCStickXNotConvSt <= cStickXADC.io.notConvSt @[Bgec.scala 79:26]
    cStickXADC.io.notEndOfConv <= io.inCStickXNotEndOfConv @[Bgec.scala 80:30]
    io.outCStickXNotChipSel <= cStickXADC.io.notChipSel @[Bgec.scala 81:27]
    io.outCStickXNotRead <= cStickXADC.io.notRead @[Bgec.scala 82:24]
    cStickXADC.io.dataBus <= io.inCStickXData @[Bgec.scala 83:25]
    inst cStickYADC of ParallelADC_3 @[Bgec.scala 85:26]
    cStickYADC.clock <= clock
    cStickYADC.reset <= reset
    io.outCStickYNotConvSt <= cStickYADC.io.notConvSt @[Bgec.scala 86:26]
    cStickYADC.io.notEndOfConv <= io.inCStickYNotEndOfConv @[Bgec.scala 87:30]
    io.outCStickYNotChipSel <= cStickYADC.io.notChipSel @[Bgec.scala 88:27]
    io.outCStickYNotRead <= cStickYADC.io.notRead @[Bgec.scala 89:24]
    cStickYADC.io.dataBus <= io.inCStickYData @[Bgec.scala 90:25]
    inst triggerLADC of ParallelADC_4 @[Bgec.scala 92:27]
    triggerLADC.clock <= clock
    triggerLADC.reset <= reset
    io.outTriggerLNotConvSt <= triggerLADC.io.notConvSt @[Bgec.scala 93:27]
    triggerLADC.io.notEndOfConv <= io.inTriggerLNotEndOfConv @[Bgec.scala 94:31]
    io.outTriggerLNotChipSel <= triggerLADC.io.notChipSel @[Bgec.scala 95:28]
    io.outTriggerLNotRead <= triggerLADC.io.notRead @[Bgec.scala 96:25]
    triggerLADC.io.dataBus <= io.inTriggerLData @[Bgec.scala 97:26]
    inst triggerRADC of ParallelADC_5 @[Bgec.scala 99:27]
    triggerRADC.clock <= clock
    triggerRADC.reset <= reset
    io.outTriggerRNotConvSt <= triggerRADC.io.notConvSt @[Bgec.scala 100:27]
    triggerRADC.io.notEndOfConv <= io.inTriggerRNotEndOfConv @[Bgec.scala 101:31]
    io.outTriggerRNotChipSel <= triggerRADC.io.notChipSel @[Bgec.scala 102:28]
    io.outTriggerRNotRead <= triggerRADC.io.notRead @[Bgec.scala 103:25]
    triggerRADC.io.dataBus <= io.inTriggerRData @[Bgec.scala 104:26]
    controller.io.inButtonA <= io.inButtonA @[Bgec.scala 106:27]
    controller.io.inButtonB <= io.inButtonB @[Bgec.scala 107:27]
    controller.io.inButtonX <= io.inButtonX @[Bgec.scala 108:27]
    controller.io.inButtonY <= io.inButtonY @[Bgec.scala 109:27]
    controller.io.inButtonL <= io.inButtonL @[Bgec.scala 110:27]
    controller.io.inButtonR <= io.inButtonR @[Bgec.scala 111:27]
    controller.io.inButtonZ <= io.inButtonZ @[Bgec.scala 112:27]
    controller.io.inButtonStart <= io.inButtonStart @[Bgec.scala 113:31]
    controller.io.inDpadDown <= io.inDpadDown @[Bgec.scala 114:28]
    controller.io.inDpadUp <= io.inDpadUp @[Bgec.scala 115:26]
    controller.io.inDpadLeft <= io.inDpadLeft @[Bgec.scala 116:28]
    controller.io.inDpadRight <= io.inDpadRight @[Bgec.scala 117:29]
    controller.io.inJoystickX <= joystickXADC.io.outData @[Bgec.scala 118:29]
    controller.io.inJoystickY <= joystickYADC.io.outData @[Bgec.scala 119:29]
    controller.io.inCstickX <= cStickXADC.io.outData @[Bgec.scala 120:27]
    controller.io.inCstickY <= cStickYADC.io.outData @[Bgec.scala 121:27]
    controller.io.inTriggerL <= triggerLADC.io.outData @[Bgec.scala 122:28]
    controller.io.inTriggerR <= triggerRADC.io.outData @[Bgec.scala 123:28]
    inst dataLine of DataLine @[Bgec.scala 125:24]
    dataLine.readData is invalid
    dataLine.writeData is invalid
    dataLine.write is invalid
    dataLine.line is invalid
    attach (dataLine.line, io.gcData) @[Bgec.scala 126:20]
    inst controllerDataSerializer of Serializer @[Bgec.scala 128:40]
    controllerDataSerializer.clock <= clock
    controllerDataSerializer.reset <= reset
    controllerDataSerializer.io.outputData <= controller.io.outData @[Bgec.scala 129:42]
    dataLine.write <= controllerDataSerializer.io.write @[Bgec.scala 131:21]
    dataLine.writeData <= controllerDataSerializer.io.writeData @[Bgec.scala 132:25]
    inst commandDeserializer of Deserializer @[Bgec.scala 134:35]
    commandDeserializer.clock <= clock
    commandDeserializer.reset <= reset
    commandDeserializer.io.readData <= dataLine.readData @[Bgec.scala 136:35]
    node _T = bits(reset, 0, 0) @[Bgec.scala 138:20]
    when _T : @[Bgec.scala 138:24]
      commandDeserializer.io.startDeserialization <= UInt<1>("h01") @[Bgec.scala 139:49]
      skip @[Bgec.scala 138:24]
    else : @[Bgec.scala 140:15]
      commandDeserializer.io.startDeserialization <= UInt<1>("h00") @[Bgec.scala 141:49]
      skip @[Bgec.scala 140:15]
    reg toldToSerialize : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Bgec.scala 149:32]
    node _T_1 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_2 = tail(_T_1, 1) @[Deserializer.scala 74:47]
    node _T_3 = add(_T_2, UInt<1>("h00")) @[Deserializer.scala 74:65]
    node _T_4 = tail(_T_3, 1) @[Deserializer.scala 74:65]
    node _T_5 = add(_T_4, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_6 = tail(_T_5, 1) @[Deserializer.scala 74:72]
    node _T_7 = rem(_T_6, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_8 = bits(_T_7, 4, 0)
    node _T_9 = xor(commandDeserializer.io.inputData[_T_8], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_11 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_12 = tail(_T_11, 1) @[Deserializer.scala 74:47]
    node _T_13 = add(_T_12, UInt<1>("h01")) @[Deserializer.scala 74:65]
    node _T_14 = tail(_T_13, 1) @[Deserializer.scala 74:65]
    node _T_15 = add(_T_14, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_16 = tail(_T_15, 1) @[Deserializer.scala 74:72]
    node _T_17 = rem(_T_16, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_18 = bits(_T_17, 4, 0)
    node _T_19 = xor(commandDeserializer.io.inputData[_T_18], UInt<1>("h01")) @[Deserializer.scala 75:21]
    node _T_20 = eq(_T_19, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_21 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_22 = tail(_T_21, 1) @[Deserializer.scala 74:47]
    node _T_23 = add(_T_22, UInt<2>("h02")) @[Deserializer.scala 74:65]
    node _T_24 = tail(_T_23, 1) @[Deserializer.scala 74:65]
    node _T_25 = add(_T_24, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_26 = tail(_T_25, 1) @[Deserializer.scala 74:72]
    node _T_27 = rem(_T_26, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_28 = bits(_T_27, 4, 0)
    node _T_29 = xor(commandDeserializer.io.inputData[_T_28], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_30 = eq(_T_29, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_31 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_32 = tail(_T_31, 1) @[Deserializer.scala 74:47]
    node _T_33 = add(_T_32, UInt<2>("h03")) @[Deserializer.scala 74:65]
    node _T_34 = tail(_T_33, 1) @[Deserializer.scala 74:65]
    node _T_35 = add(_T_34, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_36 = tail(_T_35, 1) @[Deserializer.scala 74:72]
    node _T_37 = rem(_T_36, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_38 = bits(_T_37, 4, 0)
    node _T_39 = xor(commandDeserializer.io.inputData[_T_38], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_40 = eq(_T_39, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_41 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_42 = tail(_T_41, 1) @[Deserializer.scala 74:47]
    node _T_43 = add(_T_42, UInt<3>("h04")) @[Deserializer.scala 74:65]
    node _T_44 = tail(_T_43, 1) @[Deserializer.scala 74:65]
    node _T_45 = add(_T_44, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_46 = tail(_T_45, 1) @[Deserializer.scala 74:72]
    node _T_47 = rem(_T_46, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_48 = bits(_T_47, 4, 0)
    node _T_49 = xor(commandDeserializer.io.inputData[_T_48], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_50 = eq(_T_49, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_51 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_52 = tail(_T_51, 1) @[Deserializer.scala 74:47]
    node _T_53 = add(_T_52, UInt<3>("h05")) @[Deserializer.scala 74:65]
    node _T_54 = tail(_T_53, 1) @[Deserializer.scala 74:65]
    node _T_55 = add(_T_54, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_56 = tail(_T_55, 1) @[Deserializer.scala 74:72]
    node _T_57 = rem(_T_56, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_58 = bits(_T_57, 4, 0)
    node _T_59 = xor(commandDeserializer.io.inputData[_T_58], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_60 = eq(_T_59, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_61 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_62 = tail(_T_61, 1) @[Deserializer.scala 74:47]
    node _T_63 = add(_T_62, UInt<3>("h06")) @[Deserializer.scala 74:65]
    node _T_64 = tail(_T_63, 1) @[Deserializer.scala 74:65]
    node _T_65 = add(_T_64, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_66 = tail(_T_65, 1) @[Deserializer.scala 74:72]
    node _T_67 = rem(_T_66, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_68 = bits(_T_67, 4, 0)
    node _T_69 = xor(commandDeserializer.io.inputData[_T_68], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_70 = eq(_T_69, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_71 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_72 = tail(_T_71, 1) @[Deserializer.scala 74:47]
    node _T_73 = add(_T_72, UInt<3>("h07")) @[Deserializer.scala 74:65]
    node _T_74 = tail(_T_73, 1) @[Deserializer.scala 74:65]
    node _T_75 = add(_T_74, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_76 = tail(_T_75, 1) @[Deserializer.scala 74:72]
    node _T_77 = rem(_T_76, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_78 = bits(_T_77, 4, 0)
    node _T_79 = xor(commandDeserializer.io.inputData[_T_78], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_80 = eq(_T_79, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_81 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_82 = tail(_T_81, 1) @[Deserializer.scala 74:47]
    node _T_83 = add(_T_82, UInt<4>("h08")) @[Deserializer.scala 74:65]
    node _T_84 = tail(_T_83, 1) @[Deserializer.scala 74:65]
    node _T_85 = add(_T_84, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_86 = tail(_T_85, 1) @[Deserializer.scala 74:72]
    node _T_87 = rem(_T_86, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_88 = bits(_T_87, 4, 0)
    node _T_89 = xor(commandDeserializer.io.inputData[_T_88], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_90 = eq(_T_89, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_91 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_92 = tail(_T_91, 1) @[Deserializer.scala 74:47]
    node _T_93 = add(_T_92, UInt<4>("h09")) @[Deserializer.scala 74:65]
    node _T_94 = tail(_T_93, 1) @[Deserializer.scala 74:65]
    node _T_95 = add(_T_94, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_96 = tail(_T_95, 1) @[Deserializer.scala 74:72]
    node _T_97 = rem(_T_96, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_98 = bits(_T_97, 4, 0)
    node _T_99 = xor(commandDeserializer.io.inputData[_T_98], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_100 = eq(_T_99, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_101 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_102 = tail(_T_101, 1) @[Deserializer.scala 74:47]
    node _T_103 = add(_T_102, UInt<4>("h0a")) @[Deserializer.scala 74:65]
    node _T_104 = tail(_T_103, 1) @[Deserializer.scala 74:65]
    node _T_105 = add(_T_104, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_106 = tail(_T_105, 1) @[Deserializer.scala 74:72]
    node _T_107 = rem(_T_106, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_108 = bits(_T_107, 4, 0)
    node _T_109 = xor(commandDeserializer.io.inputData[_T_108], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_110 = eq(_T_109, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_111 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_112 = tail(_T_111, 1) @[Deserializer.scala 74:47]
    node _T_113 = add(_T_112, UInt<4>("h0b")) @[Deserializer.scala 74:65]
    node _T_114 = tail(_T_113, 1) @[Deserializer.scala 74:65]
    node _T_115 = add(_T_114, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_116 = tail(_T_115, 1) @[Deserializer.scala 74:72]
    node _T_117 = rem(_T_116, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_118 = bits(_T_117, 4, 0)
    node _T_119 = xor(commandDeserializer.io.inputData[_T_118], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_120 = eq(_T_119, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_121 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_122 = tail(_T_121, 1) @[Deserializer.scala 74:47]
    node _T_123 = add(_T_122, UInt<4>("h0c")) @[Deserializer.scala 74:65]
    node _T_124 = tail(_T_123, 1) @[Deserializer.scala 74:65]
    node _T_125 = add(_T_124, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_126 = tail(_T_125, 1) @[Deserializer.scala 74:72]
    node _T_127 = rem(_T_126, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_128 = bits(_T_127, 4, 0)
    node _T_129 = xor(commandDeserializer.io.inputData[_T_128], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_130 = eq(_T_129, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_131 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_132 = tail(_T_131, 1) @[Deserializer.scala 74:47]
    node _T_133 = add(_T_132, UInt<4>("h0d")) @[Deserializer.scala 74:65]
    node _T_134 = tail(_T_133, 1) @[Deserializer.scala 74:65]
    node _T_135 = add(_T_134, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_136 = tail(_T_135, 1) @[Deserializer.scala 74:72]
    node _T_137 = rem(_T_136, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_138 = bits(_T_137, 4, 0)
    node _T_139 = xor(commandDeserializer.io.inputData[_T_138], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_140 = eq(_T_139, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_141 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_142 = tail(_T_141, 1) @[Deserializer.scala 74:47]
    node _T_143 = add(_T_142, UInt<4>("h0e")) @[Deserializer.scala 74:65]
    node _T_144 = tail(_T_143, 1) @[Deserializer.scala 74:65]
    node _T_145 = add(_T_144, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_146 = tail(_T_145, 1) @[Deserializer.scala 74:72]
    node _T_147 = rem(_T_146, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_148 = bits(_T_147, 4, 0)
    node _T_149 = xor(commandDeserializer.io.inputData[_T_148], UInt<1>("h01")) @[Deserializer.scala 75:21]
    node _T_150 = eq(_T_149, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_151 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_152 = tail(_T_151, 1) @[Deserializer.scala 74:47]
    node _T_153 = add(_T_152, UInt<4>("h0f")) @[Deserializer.scala 74:65]
    node _T_154 = tail(_T_153, 1) @[Deserializer.scala 74:65]
    node _T_155 = add(_T_154, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_156 = tail(_T_155, 1) @[Deserializer.scala 74:72]
    node _T_157 = rem(_T_156, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_158 = bits(_T_157, 4, 0)
    node _T_159 = xor(commandDeserializer.io.inputData[_T_158], UInt<1>("h01")) @[Deserializer.scala 75:21]
    node _T_160 = eq(_T_159, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_161 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_162 = tail(_T_161, 1) @[Deserializer.scala 74:47]
    node _T_163 = add(_T_162, UInt<5>("h010")) @[Deserializer.scala 74:65]
    node _T_164 = tail(_T_163, 1) @[Deserializer.scala 74:65]
    node _T_165 = add(_T_164, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_166 = tail(_T_165, 1) @[Deserializer.scala 74:72]
    node _T_167 = rem(_T_166, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_168 = bits(_T_167, 4, 0)
    node _T_169 = xor(commandDeserializer.io.inputData[_T_168], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_170 = eq(_T_169, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_171 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_172 = tail(_T_171, 1) @[Deserializer.scala 74:47]
    node _T_173 = add(_T_172, UInt<5>("h011")) @[Deserializer.scala 74:65]
    node _T_174 = tail(_T_173, 1) @[Deserializer.scala 74:65]
    node _T_175 = add(_T_174, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_176 = tail(_T_175, 1) @[Deserializer.scala 74:72]
    node _T_177 = rem(_T_176, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_178 = bits(_T_177, 4, 0)
    node _T_179 = xor(commandDeserializer.io.inputData[_T_178], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_180 = eq(_T_179, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_181 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_182 = tail(_T_181, 1) @[Deserializer.scala 74:47]
    node _T_183 = add(_T_182, UInt<5>("h012")) @[Deserializer.scala 74:65]
    node _T_184 = tail(_T_183, 1) @[Deserializer.scala 74:65]
    node _T_185 = add(_T_184, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_186 = tail(_T_185, 1) @[Deserializer.scala 74:72]
    node _T_187 = rem(_T_186, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_188 = bits(_T_187, 4, 0)
    node _T_189 = xor(commandDeserializer.io.inputData[_T_188], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_190 = eq(_T_189, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_191 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_192 = tail(_T_191, 1) @[Deserializer.scala 74:47]
    node _T_193 = add(_T_192, UInt<5>("h013")) @[Deserializer.scala 74:65]
    node _T_194 = tail(_T_193, 1) @[Deserializer.scala 74:65]
    node _T_195 = add(_T_194, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_196 = tail(_T_195, 1) @[Deserializer.scala 74:72]
    node _T_197 = rem(_T_196, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_198 = bits(_T_197, 4, 0)
    node _T_199 = xor(commandDeserializer.io.inputData[_T_198], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_200 = eq(_T_199, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_201 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_202 = tail(_T_201, 1) @[Deserializer.scala 74:47]
    node _T_203 = add(_T_202, UInt<5>("h014")) @[Deserializer.scala 74:65]
    node _T_204 = tail(_T_203, 1) @[Deserializer.scala 74:65]
    node _T_205 = add(_T_204, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_206 = tail(_T_205, 1) @[Deserializer.scala 74:72]
    node _T_207 = rem(_T_206, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_208 = bits(_T_207, 4, 0)
    node _T_209 = xor(commandDeserializer.io.inputData[_T_208], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_210 = eq(_T_209, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_211 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_212 = tail(_T_211, 1) @[Deserializer.scala 74:47]
    node _T_213 = add(_T_212, UInt<5>("h015")) @[Deserializer.scala 74:65]
    node _T_214 = tail(_T_213, 1) @[Deserializer.scala 74:65]
    node _T_215 = add(_T_214, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_216 = tail(_T_215, 1) @[Deserializer.scala 74:72]
    node _T_217 = rem(_T_216, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_218 = bits(_T_217, 4, 0)
    node _T_219 = xor(commandDeserializer.io.inputData[_T_218], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_220 = eq(_T_219, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_221 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_222 = tail(_T_221, 1) @[Deserializer.scala 74:47]
    node _T_223 = add(_T_222, UInt<5>("h016")) @[Deserializer.scala 74:65]
    node _T_224 = tail(_T_223, 1) @[Deserializer.scala 74:65]
    node _T_225 = add(_T_224, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_226 = tail(_T_225, 1) @[Deserializer.scala 74:72]
    node _T_227 = rem(_T_226, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_228 = bits(_T_227, 4, 0)
    node _T_229 = xor(commandDeserializer.io.inputData[_T_228], UInt<1>("h01")) @[Deserializer.scala 75:21]
    node _T_230 = eq(_T_229, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_231 = sub(UInt<5>("h018"), UInt<5>("h018")) @[Deserializer.scala 74:47]
    node _T_232 = tail(_T_231, 1) @[Deserializer.scala 74:47]
    node _T_233 = add(_T_232, UInt<5>("h017")) @[Deserializer.scala 74:65]
    node _T_234 = tail(_T_233, 1) @[Deserializer.scala 74:65]
    node _T_235 = add(_T_234, commandDeserializer.io.bitsRead) @[Deserializer.scala 74:72]
    node _T_236 = tail(_T_235, 1) @[Deserializer.scala 74:72]
    node _T_237 = rem(_T_236, UInt<5>("h018")) @[Deserializer.scala 74:87]
    node _T_238 = bits(_T_237, 4, 0)
    node _T_239 = xor(commandDeserializer.io.inputData[_T_238], UInt<1>("h00")) @[Deserializer.scala 75:21]
    node _T_240 = eq(_T_239, UInt<1>("h00")) @[Deserializer.scala 75:9]
    node _T_241 = and(UInt<1>("h01"), _T_10) @[Deserializer.scala 76:26]
    node _T_242 = and(_T_241, _T_20) @[Deserializer.scala 76:26]
    node _T_243 = and(_T_242, _T_30) @[Deserializer.scala 76:26]
    node _T_244 = and(_T_243, _T_40) @[Deserializer.scala 76:26]
    node _T_245 = and(_T_244, _T_50) @[Deserializer.scala 76:26]
    node _T_246 = and(_T_245, _T_60) @[Deserializer.scala 76:26]
    node _T_247 = and(_T_246, _T_70) @[Deserializer.scala 76:26]
    node _T_248 = and(_T_247, _T_80) @[Deserializer.scala 76:26]
    node _T_249 = and(_T_248, _T_90) @[Deserializer.scala 76:26]
    node _T_250 = and(_T_249, _T_100) @[Deserializer.scala 76:26]
    node _T_251 = and(_T_250, _T_110) @[Deserializer.scala 76:26]
    node _T_252 = and(_T_251, _T_120) @[Deserializer.scala 76:26]
    node _T_253 = and(_T_252, _T_130) @[Deserializer.scala 76:26]
    node _T_254 = and(_T_253, _T_140) @[Deserializer.scala 76:26]
    node _T_255 = and(_T_254, _T_150) @[Deserializer.scala 76:26]
    node _T_256 = and(_T_255, _T_160) @[Deserializer.scala 76:26]
    node _T_257 = and(_T_256, _T_170) @[Deserializer.scala 76:26]
    node _T_258 = and(_T_257, _T_180) @[Deserializer.scala 76:26]
    node _T_259 = and(_T_258, _T_190) @[Deserializer.scala 76:26]
    node _T_260 = and(_T_259, _T_200) @[Deserializer.scala 76:26]
    node _T_261 = and(_T_260, _T_210) @[Deserializer.scala 76:26]
    node _T_262 = and(_T_261, _T_220) @[Deserializer.scala 76:26]
    node _T_263 = and(_T_262, _T_230) @[Deserializer.scala 76:26]
    node _T_264 = and(_T_263, _T_240) @[Deserializer.scala 76:26]
    when _T_264 : @[Bgec.scala 151:65]
      node _T_265 = eq(toldToSerialize, UInt<1>("h00")) @[Bgec.scala 152:55]
      controllerDataSerializer.io.startSerialization <= _T_265 @[Bgec.scala 152:52]
      toldToSerialize <= UInt<1>("h01") @[Bgec.scala 153:21]
      skip @[Bgec.scala 151:65]
    else : @[Bgec.scala 154:15]
      controllerDataSerializer.io.startSerialization <= UInt<1>("h00") @[Bgec.scala 155:52]
      toldToSerialize <= UInt<1>("h00") @[Bgec.scala 156:21]
      skip @[Bgec.scala 154:15]
    commandDeserializer.io.pauseDeserialization <= controllerDataSerializer.io.write @[Bgec.scala 158:47]
    
